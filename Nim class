import java.util.Random;
import java.util.Scanner;

public class Nim {
	private Heap heapA; //first heap
	private Heap heapB; //second heap
	private Heap heapC; //third heap
	private Random randomNumbers = new Random(); //Random number generator
	private Scanner input; //scanner for all inputs

	public Nim(){ //Default constructor
		heapA = new Heap(10);
		heapB = new Heap(10);
		heapC = new Heap(10);
	}

	public boolean playerMove(){ //One move for the player, did the player select a valid move?
		boolean flag = false ;
		int objectsToRemove=0;
		char heapSelected;
		input = new Scanner(System.in);

		do{
			System.out.print("\nSelect a heap:");
			heapSelected = input.next().charAt(0);

			if(heapSelected=='a' || heapSelected=='A'){
				do{
					System.out.print("How many do you want to remove from heap A? ");
					objectsToRemove = input.nextInt();	
					if(objectsToRemove<= heapA.getSize() && objectsToRemove >0 ){
						flag=heapA.remove(objectsToRemove);
						break;
					}
					else{
						System.out.println("Invalid Input: Removing from " + objectsToRemove + " objects from heap A is not a possible move\n"); 
					}
				}while(flag!=true);
			}
			
			else if(heapSelected=='b' || heapSelected=='B'){
				do{
					System.out.print("How many do you want to remove from heap B? ");
					objectsToRemove = input.nextInt();	
					if(objectsToRemove<= heapB.getSize() && objectsToRemove >0 ){
						flag=heapB.remove(objectsToRemove);
						break;
					}
					else{
						System.out.println("Invalid Input: Removing from " + objectsToRemove + " objects from heap B is not a possible move\n"); 
					}
				}while(flag!=true);
			}

			else if(heapSelected=='c' || heapSelected=='C'){
				do{
					System.out.print("How many do you want to remove from heap C? ");
					objectsToRemove = input.nextInt();	
					if(objectsToRemove<= heapC.getSize() && objectsToRemove >0 ){
						heapC.remove(objectsToRemove);
						break;
					}
					else{
						System.out.println("Invalid Input: Removing from " + objectsToRemove + " objects from heap C is not a possible move\n"); 
					}
				}while(flag!=true);
			}
			else{
				System.out.print("\nInvalid Input: Heap " + heapSelected + " does not exist");
				System.out.println("");
			}	
		}while((heapA.remove(0)== false || heapB.remove(0)==false || heapC.remove(0)==false) || (heapSelected!='a'&& heapSelected!='A' && heapSelected!='b' && heapSelected!='B' && heapSelected!='c' && heapSelected!='C'));
		return true;
	}


	public void gameMove(){ //One move for the computer
		int computerRandomHeap = randomNumbers.nextInt(3)+1; // computer randomly picks heap
		switch(computerRandomHeap){

		case 1:
			
			int computerRandomNumber = randomNumbers.nextInt(10)+1;
			heapA.remove(computerRandomNumber);
			break;

		case 2:
			computerRandomNumber = randomNumbers.nextInt(10)+1;
			heapB.remove(computerRandomNumber);
			break;

		case 3:
			computerRandomNumber = randomNumbers.nextInt(10)+1;
			heapC.remove(computerRandomNumber);
			break;
		}		
	}


	public void printHeaps(){ //Print all the heaps


		System.out.print("\tA");
		System.out.print("\tB");
		System.out.println("\tC");
		heapA.displaySize();
		heapB.displaySize();
		heapC.displaySize();
		System.out.println("");
	}

	public boolean gameDone(){ //is the game done?
		if((heapA.getSize()==0) || (heapA.getSize()==0) || (heapA.getSize()==0) )
			return true;
		else 
			return false;
	}

}
